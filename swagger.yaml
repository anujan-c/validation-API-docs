openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Z5480644/JAHAA-Validator/1.0.0
info:
  version: "1.0.0"
  title: ubl-invoice-validation-api
  description: The API for UBL 2.1 XML invoice validation
paths:
  /register:
    post:
      tags: 
        - User Details
      description: Registers a new user to the system so that they can use the rest of the validation API securely
      operationId: register
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  description: Needs to have at least 8 characters in total, including 1 uppercase character, 1 lower case character and 1 number.
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
            
        '400':
          description: |
            One of the following issues have been flagged
            + Email already registered
            + Email is not of a valid format
            + Password is not at least 8 characters long
            + Password does not contain at least one uppercase character
            + Password does not contain at least one lowercase character
            + Password does not contain at least one number
  
  /login:
    post:
      tags:
        - User Details
      description: Takes in a registered user's email and password and, if correctly entered, returns a user token to give a user access to the rest of the service
      operationId: login
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: string
                description: user token
                example: 5
        '400':
          description: Unregistered email or incorrect password
  /logout:
    post:
      tags:
        - User Details
      description: Logs out a logged in user
      operationId: logout
      parameters: 
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid token
            
        
    
          
  /reports/{reportId}/{format}:
    get:
      tags:
        - Reports
      description: Allows a user to retrieve a previously generated validation reports
      operationId: getReport
      parameters:
        - name: token
          example: 5
          in: header
          required: true
          schema:
            type: string
        - name: reportId
          example: 2
          in: path
          required: true
          schema:
            type: integer
        - name: format
          in: path
          required: true
          schema:
            enum: [json, html, pdf]
          

      responses:
        '200':
          description: Returns the report file in the desired format
          content:

            application/json:
              schema:
                example: report.json
                type: string
                format: byte
                description: report file
        '401':
          description: User does not have authorisation to retrieve this report
        '400':
          description: |
            If one of the following is true
            + token is invalid
            + invalid format is requested
          # if we do completely unique report ids then we could make this a 401 error
  /reports/{reportId}:
    delete:
      tags:
        - Reports
      description: Allows a user to delete a previously generated validation report
      operationId: deleteReport
      parameters:
        - name: token
          example: 5
          in: header
          required: true
          schema:
            type: string
        - name: reportId
          example: 2
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '401':
          description: User is not authorised to delete the specified report
        '400':
          description: Invalid token
      
  /validate:
    post:
      tags:
        - Validation
      operationId: Validate
      description: Generates a new validation report for a user's UBL 2.1 XML invoice file
      parameters:
        - name: token
          example: 5
          in: header
          required: true
          schema:
            type: string
        # - name: wellformedness
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum: 
        #       - true
        #       - false
        # - name: peppol
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum:
        #       - true
        #       - false
        # - name: syntax
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum:
        #       - true
        #       - false
        # - name: schema
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum: 
        #       - true
        #       - false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:          # <-- image embedded into JSON
                  type: string
                  format: byte
                  description: Base64-encoded contents the UBL 2.1 XML invoice file
                wellformedness:
                  type: boolean
                  description: Check for whether wellformedness should be validated
                peppol:
                  type: boolean
                  description: Check for whether PEPPOL rules should be validated
                syntax:
                  type: boolean
                  description: Check for whether syntax rules should be validated
                schema: 
                  type: boolean
                  description: Check for whether syntax rules should be validated
      responses:
        '200':
          description: Returns the generated report Id
          content:
            application/json:
              schema:
                type: integer
                example: 2
        '400':
          description: |
            One of the following is true
            + Invalid token
            + Provided file is not an XML file
            + Provided file could not be read
  /validate/{reportId}:
    put:
      description: Updates a previously generated report using a newly inputted UBL 2.1 XML invoice file
      tags:
        - Validation
      operationId: UpdateValidate
      parameters:
        - name: token
          example: 5
          in: header
          required: true
          schema:
            type: string
        - name: reportId
          example: 2
          in: path
          required: true
          schema:
            type: integer
            format: int32
        # - name: wellformedness
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum: 
        #       - true
        #       - false
        # - name: peppol
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum:
        #       - true
        #       - false
        # - name: syntax
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum:
        #       - true
        #       - false
        # - name: schema
        #   in: query
        #   required: true
        #   schema:
        #     type: boolean
        #     enum: 
        #       - true
        #       - false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:          # <-- image embedded into JSON
                  type: string
                  format: byte
                  description: Base64-encoded contents the UBL 2.1 XML invoice file
                wellformedness:
                  type: boolean
                  description: Check for whether wellformedness should be validated
                peppol:
                  type: boolean
                  description: Check for whether PEPPOL rules should be validated
                syntax:
                  type: boolean
                  description: Check for whether syntax rules should be validated
                schema: 
                  type: boolean
                  description: Check for whether syntax rules should be validated
      responses:
        '200':
          description: validation report of the provided UBL 2.1 XML invoice file.
          content:
            application/json:
              schema:
                type: string
                format: binary
                example: report.json
        '401': 
          description: User does not have authorisation to update this report
        '400':
          description: Invalid token
